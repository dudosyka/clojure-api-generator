package {{:controller-path}}.controller


import {{:package-name}}.exceptions.BadRequestException
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import {{:package-name}}.utils.kodein.KodeinController
import io.ktor.server.routing.*
import org.kodein.di.DI
import org.kodein.di.instance
import {{:create-dto-path}}
import {{:update-dto-path}}
import {{:service-path}}

class {{:model-name-capitalize}}Controller(override val di: DI) : KodeinController() {
    private val {{:service-instance-name}}Service by instance()

    override fun Route.registerRoutes() {
        route("{{:route}}") {
            authenticate("default") {
                post {
                    val createDto = call.receive<Create{{:model-name-capitalize}}Dto>()
                    call.respond({{:service-name-lower}}Service.create(createDto))
                }
                get {
                    call.respond({{:service-name-lower}}Service.getAll())
                }
                get(":id") {
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.getOne(id))
                }
                patch(":id") {
                    val updateDto = call.receive<Update{{:model-name-capitalize}}Dto>()
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.update(id, updateDto))
                }
                delete(":id") {
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.delete(id))
                }
                patch("/visible/:id") {
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.toggleVisible(id))
                }
                patch("/position/:id/up") {
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.positionUp(id))
                }
                patch("/position/:id/down") {
                    val id = call.parameters["id"]?.toIntOrNull() ?: throw BadRequestException("Id must be Int")
                    call.respond({{:service-name-lower}}Service.positionDown(id))
                }
            }
        }
    }
}